## 七个主要的面向对象设计原则
#### 单一职责原则(Single Responsibility Principle, SRP) ★★★★☆
类的职责要单一，不能将太多的职责放在一个类中。

#### 开闭原则(Open-Closed Principle, OCP) ★★★★★
软件实体对扩展是开放的，但对修改是关闭的，即在不修改一个软件实体的基础上去扩展其功能。

#### 里氏代换原则(Liskov Substitution Principle, LSP) ★★★★☆
在软件系统中，一个可以接受基类对象的地方必然可以接受一个子类对象。

#### 依赖倒转原则(Dependency Inversion Principle, DIP) ★★★★★
要针对抽象层编程，而不要针对具体类编程。

#### 接口隔离原则(Interface Segregation Principle, ISP) ★★☆☆☆
使用多个专门的接口来取代一个统一的接口。

#### 合成复用原则(Composite Reuse Principle, CRP) ★★★★☆
在系统中应该尽量多使用组合和聚合关联关系，尽量少使用甚至不使用继承关系。

#### 迪米特法则(Law of Demeter, LoD) ★★★☆☆
一个软件实体对其他实体的引用越少越好，或者说如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，而是通过引入一个第三者发生间接交互。

摘要：

    记得有人比喻过软件开发、设计原则、设计模式之间的关系就是战争、战略和战术的关系，关于设计模式实际上是设计原则的具体应用。
    正如牛顿三大定律在经典力学中的位置一样，“开-闭”原则（Open-Closed Principle）是面向对象的可复用设计（Object Oriented Design或OOD）的基石。
其他设计原则（里氏代换原则、依赖倒转原则、合成/聚合复用原则、迪米特法则、接口隔离原则）是实现“开-闭”原则的手段和工具，是面向对象设计中最重要的
原则之一，其它很多的设计原则都是实现开闭原则的一种手段。
